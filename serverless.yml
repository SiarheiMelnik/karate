service: karate

frameworkVersion: ">=1.14.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs6.10
  region: us-east-1
  stage: test
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:DeleteMessage
        - sqs:ReceiveMessage
      Resource: arn:aws:sqs:*:*:${self:custom.sqs}
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: arn:aws:lambda:*:*:function:${self:custom.worker}
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: arn:aws:lambda:*:*:function:${self:custom.sender}
  environment:
    region: ${self:provider.region}
    stage: ${self:custom.stage}
    scraper: ${self:custom.scraper}
    sqs: ${self:custom.sqs}
    worker: ${self:custom.worker}
    sender: ${self:custom.sender}

plugins:
  - serverless-webpack

custom:
  webpackIncludeModules: true
  stage: ${opt:stage, self:provider.stage}
  prefix: ${self:custom.stage}-${self:service}
  scraper: ${self:custom.prefix}-scraper
  task: ${self:custom.prefix}-task
  sqs: ${self:custom.prefix}-messages
  worker: ${self:custom.prefix}-worker
  sender: ${self:custom.prefix}-sender

functions:
  task:
    handler: handler.scrapeTask
    name: ${self:custom.task}
    timeout: 10
    memorySize: 128
    events:
      - http:
          method: post
          path: scrape/{page_id}
          cors: true

  worker:
    handler: handler.scrapeWorker
    name: ${self:custom.worker}
    timeout: 300
    memorySize: 512
    events:
      - schedule: rate(5 minutes)

  sender:
    handler: handler.scrapeSender
    name: ${self:custom.sender}
    timeout: 10
    memorySize: 128

resources:
  Resources:
    Messages:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.sqs}
        ReceiveMessageWaitTimeSeconds: 10
        VisibilityTimeout: 15
